#include "widget.h"
#include "victoryhandler.h"
#include "highlightpieces.h"
#include <QMessageBox>

VictoryHandler::VictoryHandler(QWidget *parent) {}

void VictoryHandler::checkGameOver()
{
    if (isCheckmate()) {
        qDebug() << "üèÅ Checkmate √©szlelve!";
        QMessageBox::information(this, "J√°t√©k v√©ge", isWhiteTurn ? "Fekete nyert (matt)!" : "Feh√©r nyert (matt)!");
        isStarted = false;
    }
    else if (isStalemate()) {
        qDebug() << "‚öñÔ∏è Stalemate √©szlelve!";
        QMessageBox::information(this, "J√°t√©k v√©ge", "D√∂ntetlen (pat)!");
        isStarted = false;
    }
    else if (isDraw()) {
        qDebug() << "ü§ù D√∂ntetlen √©szlelve!";
        QMessageBox::information(this, "J√°t√©k v√©ge", "D√∂ntetlen!");
        isStarted = false;
    }
    possibleMoves.clear();
}

bool VictoryHandler::isOwnPiece(int row, int col)
{
    if (board[row][col] == ' ') return false; // √úres mez≈ë

    char piece = board[row][col];

    if (isWhiteTurn) {
        // Feh√©r j√°t√©kos: a saj√°t b√°buk nagybet≈±sek
        return (piece >= 'A' && piece <= 'Z');
    } else {
        // Fekete j√°t√©kos: a saj√°t b√°buk kisbet≈±sek
        return (piece >= 'a' && piece <= 'z');
    }
}

bool VictoryHandler::isCheckmate()
{
    // Find the king's position
    int kingRow = -1, kingCol = -1;
    char kingChar = isWhiteTurn ? 'K' : 'k'; // Feh√©r kir√°ly: 'K', Fekete kir√°ly: 'k'

    for (int row = 0; row < 8; ++row) {
        for (int col = 0; col < 8; ++col) {
            if (board[row][col] == kingChar) {
                kingRow = row;
                kingCol = col;
                break;
            }
        }
    }

    // Ha nem tal√°ljuk a kir√°lyt (valami nagyobb hiba t√∂rt√©nt)
    if (kingRow == -1 || kingCol == -1) return false;

    // Ellen≈ërizz√ºk, hogy sakkban van-e
    if (!widget->isSquareAttacked(kingRow, kingCol, isWhiteTurn)) return false;

    // Ha sakkban van, ellen≈ërizz√ºk, hogy van-e √©rv√©nyes l√©p√©se
    for (int row = 0; row < 8; ++row) {
        for (int col = 0; col < 8; ++col) {
            if (widget->isOwnPiece(row, col)) {  // Ha saj√°t b√°bunk
                highlightPieces->highlightMoves(row, col);
                if (!possibleMoves.isEmpty()) return false;  // Ha van l√©p√©s, nem matt
            }
        }
    }

    return true; // Nincs √©rv√©nyes l√©p√©s ‚Üí matt
}

bool VictoryHandler::isStalemate()
{
    // Find the king's position
    int kingRow = -1, kingCol = -1;
    char kingChar = isWhiteTurn ? 'K' : 'k'; // Feh√©r kir√°ly: 'K', Fekete kir√°ly: 'k'

    for (int row = 0; row < 8; ++row) {
        for (int col = 0; col < 8; ++col) {
            if (board[row][col] == kingChar) {
                kingRow = row;
                kingCol = col;
                break;
            }
        }
    }

    // Ha nem tal√°ljuk a kir√°lyt (valami nagyobb hiba t√∂rt√©nt)
    if (kingRow == -1 || kingCol == -1) return false;

    // Ha a kir√°ly t√°mad√°s alatt √°ll, nem lehet patt
    if (widget->isSquareAttacked(kingRow, kingCol, isWhiteTurn)) return false;

    // Ha nincs √©rv√©nyes l√©p√©s, patt
    for (int row = 0; row < 8; ++row) {
        for (int col = 0; col < 8; ++col) {
            if (isOwnPiece(row, col)) {  // Ha saj√°t b√°bunk
                highlightPieces->highlightMoves(row, col);
                if (!possibleMoves.isEmpty()) return false;  // Ha van l√©p√©s, nem patt
            }
        }
    }

    return true; // Nincs √©rv√©nyes l√©p√©s, de a kir√°ly nincs sakkban ‚Üí patt
}

bool VictoryHandler::isDraw()
{
    // Anyaghi√°ny eset√©n d√∂ntetlen (pl. csak k√©t kir√°ly maradt a t√°bl√°n)
    int pieceCount = 0;
    for (const auto &row : board) {
        for (char piece : row) {
            if (piece != ' ') pieceCount++;
        }
    }
    if (pieceCount <= 3) return true; // Kir√°ly vs kir√°ly vagy kir√°ly + kisebb figura

    if (stepsCount >= 100) { // 100 f√©l l√©p√©s = 50 teljes l√©p√©s
        qDebug() << "üìú √ñtven l√©p√©s szab√°ly miatt d√∂ntetlen!";
        return true;
    }

    return false;
}
